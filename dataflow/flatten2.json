{
	"name": "flatten2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Json7",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable15",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "flatten2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          fullName as string,",
				"          country as string,",
				"          email as string,",
				"          phone as string,",
				"          accountCreated as string,",
				"          accounts as (accountId as integer, accountBalance as integer, created as string)[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> source1",
				"source1 aggregate(boby = collect(@(id = id,fullName = fullName,country = country,email= email,phone= phone,accountCreated=accountCreated)),",
				"          account = collect(@(accountid = accounts.accountId,accountBalance = accounts.accountBalance,created=accounts.created))) ~> aggregate1",
				"aggregate1 foldDown(unroll(boby),",
				"     mapColumn(",
				"          id = boby.id,",
				"          fullName = boby.fullName,",
				"          country = boby.country,",
				"          email = boby.email,",
				"          phone = boby.phone,",
				"          accountCreated = boby.accountCreated,",
				"          account = account",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 foldDown(unroll(account),",
				"     mapColumn(",
				"          accountid = account.accountid,",
				"          accountBalance = account.accountBalance,",
				"          created = account.created",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"flatten2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}